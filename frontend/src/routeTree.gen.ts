/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FormsRouteImport } from './routes/forms/route'
import { Route as BuilderRouteImport } from './routes/builder/route'
import { Route as IndexImport } from './routes/index'
import { Route as BuilderFormIdImport } from './routes/builder/$formId'
import { Route as AuthSignUpImport } from './routes/auth/sign-up'
import { Route as AuthLoginImport } from './routes/auth/login'

// Create/Update Routes

const FormsRouteRoute = FormsRouteImport.update({
  id: '/forms',
  path: '/forms',
  getParentRoute: () => rootRoute,
} as any)

const BuilderRouteRoute = BuilderRouteImport.update({
  id: '/builder',
  path: '/builder',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const BuilderFormIdRoute = BuilderFormIdImport.update({
  id: '/$formId',
  path: '/$formId',
  getParentRoute: () => BuilderRouteRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/builder': {
      id: '/builder'
      path: '/builder'
      fullPath: '/builder'
      preLoaderRoute: typeof BuilderRouteImport
      parentRoute: typeof rootRoute
    }
    '/forms': {
      id: '/forms'
      path: '/forms'
      fullPath: '/forms'
      preLoaderRoute: typeof FormsRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof rootRoute
    }
    '/builder/$formId': {
      id: '/builder/$formId'
      path: '/$formId'
      fullPath: '/builder/$formId'
      preLoaderRoute: typeof BuilderFormIdImport
      parentRoute: typeof BuilderRouteImport
    }
  }
}

// Create and export the route tree

interface BuilderRouteRouteChildren {
  BuilderFormIdRoute: typeof BuilderFormIdRoute
}

const BuilderRouteRouteChildren: BuilderRouteRouteChildren = {
  BuilderFormIdRoute: BuilderFormIdRoute,
}

const BuilderRouteRouteWithChildren = BuilderRouteRoute._addFileChildren(
  BuilderRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/builder': typeof BuilderRouteRouteWithChildren
  '/forms': typeof FormsRouteRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/builder/$formId': typeof BuilderFormIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/builder': typeof BuilderRouteRouteWithChildren
  '/forms': typeof FormsRouteRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/builder/$formId': typeof BuilderFormIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/builder': typeof BuilderRouteRouteWithChildren
  '/forms': typeof FormsRouteRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/builder/$formId': typeof BuilderFormIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/builder'
    | '/forms'
    | '/auth/login'
    | '/auth/sign-up'
    | '/builder/$formId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/builder'
    | '/forms'
    | '/auth/login'
    | '/auth/sign-up'
    | '/builder/$formId'
  id:
    | '__root__'
    | '/'
    | '/builder'
    | '/forms'
    | '/auth/login'
    | '/auth/sign-up'
    | '/builder/$formId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BuilderRouteRoute: typeof BuilderRouteRouteWithChildren
  FormsRouteRoute: typeof FormsRouteRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BuilderRouteRoute: BuilderRouteRouteWithChildren,
  FormsRouteRoute: FormsRouteRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/builder",
        "/forms",
        "/auth/login",
        "/auth/sign-up"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/builder": {
      "filePath": "builder/route.tsx",
      "children": [
        "/builder/$formId"
      ]
    },
    "/forms": {
      "filePath": "forms/route.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/sign-up": {
      "filePath": "auth/sign-up.tsx"
    },
    "/builder/$formId": {
      "filePath": "builder/$formId.tsx",
      "parent": "/builder"
    }
  }
}
ROUTE_MANIFEST_END */
